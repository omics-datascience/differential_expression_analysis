# Función para verificar e instalar paquetes
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install()
verificar_e_instalar <- function(paquete) {
if (!require(paquete, quietly = TRUE)) {
BiocManager::install(paquete, force = TRUE)
}
}
# Instalar el paquete matrixStats si no lo tienes
if (!require("matrixStats")) install.packages("matrixStats")
if(!require(ggrepel)){install.packages("ggrepel")}
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar edgeR (solo para graficas de volcan)
verificar_e_instalar("edgeR")
# Cargar las bibliotecas (ya deberían estar instaladas con el paso anterior)
library(limma)
library(edgeR)
library(dplyr)
library(matrixStats)
library(ggplot2)
library(ggrepel)
#### Cargo y proceso metadatos clinicos ####
cat("Cargando dataset de metadatos...", "\n")
# Asegur que el dataset tenga los IDs de muestra en la primera columna y los grupos en la segunda.
clinical_data <- read.table("datasets/luad_tcga/data_clinical_patient.txt", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
sample_data <- read.table("datasets/luad_tcga/data_clinical_sample.txt", header = TRUE, sep = "\t", check.names = FALSE)
##### Proceso clinical data #####
clinical_data <- clinical_data[, c("PATIENT_ID", "SEX")]
clinical_data$SEX <- toupper(as.character(clinical_data$SEX))
# unique(clinical_data$SEX) # chequeo que solo haya dos formas de expresar el sexo biologico
# Elimino duplicados
clinical_data <- clinical_data[!duplicated(clinical_data), ]
##### Proceso sample data #####
sample_data <- sample_data[, c("SAMPLE_ID", "PATIENT_ID")]
##### Mergeo clinical & sample data #####
# Realizar el merge entre sample_data y clinical_data usando 'PATIENT_ID'
metadatos <- merge(sample_data, clinical_data, by = "PATIENT_ID")
# Seleccionar solo las columnas 'SAMPLE_ID' y 'SEX'
metadatos <- metadatos[, c("SAMPLE_ID", "SEX")]
# Reemplazar los guiones medios por puntos en la columna 'SAMPLE_ID' (Porque asi se llamaran en el dataset de RNASeq por defecto segun R)
metadatos$SAMPLE_ID <- gsub("-", ".", metadatos$SAMPLE_ID)
# Número de muestras (filas) antes de eliminar duplicados
n_before <- nrow(metadatos)
metadatos <- metadatos[!duplicated(metadatos), ]
# Número de muestras después de eliminar duplicados
n_after <- nrow(metadatos)
cat("Dataset de metadatos: Resumen", "\n")
cat("Dataset de metadatos: Filas (muestras) eliminadas por duplicacion:", n_before - n_after, "\n")
cat("Dataset de metadatos: Numero de muestras:", n_after, "\n")
metadatos %>%
dplyr::count(SEX) %>%
dplyr::mutate(Proporcion = 100 * n / sum(n))
# SAMPLE_ID tiene los muestras
# SEX tiene los grupos (FEMALE Y MALE)
#### Cargo y proceso datos de RNASeq (TPM data) ####
cat("Cargando dataset de RNASeq normalizados a TPM...", "\n")
rnaseq_tpm_data <- read.table("datasets/luad_tcga/data_mrna_seq_v2_rsem.txt", header = TRUE, sep = "\t")
# Identificar y eliminar los Hugo_Symbols duplicados
duplicados <- rnaseq_tpm_data %>%
filter(duplicated(Hugo_Symbol)) %>%
pull(Hugo_Symbol)
num_duplicados <- length(duplicados)
rnaseq_tpm_data <- rnaseq_tpm_data %>%
distinct(Hugo_Symbol, .keep_all = TRUE) %>%   # Elimina duplicados por 'Hugo_Symbol'
select(-Entrez_Gene_Id)                       # Elimina la columna 'Entrez_Gene_Id'
cat("Dataset de RNASeq: Número de genes (filas) eliminados:", num_duplicados, "\n")
cat("Dataset de RNASeq: Hugo_Symbols duplicados:", unique(duplicados), "\n")
# Obtener los valores de SAMPLE_ID del dataframe metadatos
# Obtengo muestras en comun entre los dataset de datos y metadatos
valid_columns <- intersect(colnames(rnaseq_tpm_data), metadatos$SAMPLE_ID)
# Filtrar las columnas de rnaseq_tpm_data que coincidan con los SAMPLE_ID
total_muestras_antes <- ncol(rnaseq_tpm_data) - 1  # Restamos 1 porque "Hugo_Symbol" no es una muestra
rnaseq_tpm_data <- rnaseq_tpm_data[, c("Hugo_Symbol", valid_columns)]
total_muestras_despues <- ncol(rnaseq_tpm_data) - 1
cat("Dataset de RNASeq: Número de muestras antes de la filtrar:", total_muestras_antes, "\n")
cat("Dataset de RNASeq:Número de muestras después de la filtrar:", total_muestras_despues, "\n")
cat("Dataset de RNASeq:Número de muestras eliminadas:", total_muestras_antes - total_muestras_despues, "\n")
cat("Dataset de RNASeq: Resumen Final", "\n")
cat("Dataset de RNASeq: Numero de genes:", nrow(rnaseq_tpm_data), "\n")
cat("Dataset de RNASeq: Numero de muestras:", ncol(rnaseq_tpm_data) - 1, "\n")
filas_con_na <- is.na(rnaseq_tpm_data[, 1])
# Eliminar las filas con NA
rnaseq_tpm_data <- rnaseq_tpm_data[!filas_con_na, ]
rownames(rnaseq_tpm_data) <- rnaseq_tpm_data[, 1]
rnaseq_tpm_data <- rnaseq_tpm_data[, -1] # Elimina la primera columna de genes (ahora es el índice)
# Elimino las muestras en metadatos que finalmente no estuvieron en el dataset de RNASeq
metadatos <- metadatos %>% dplyr::filter(SAMPLE_ID %in% valid_columns)
#### Análisis de expresión diferencial con limma ####
# Transformar los datos a escala logarítmica (Asi lo exige lima cuando usamos datos en TPM)
#
# Separar los símbolos de genes Hugo y los datos de expresión
log_data <- log2(rnaseq_tpm_data + 1)
sum(is.na(log_data))
#### Graficas para comparar distribucion antes y despues de aplicar log ####
# Cargar paquetes necesarios
library(ggplot2)
library(reshape2)
library(gridExtra)
# Cargar tus datos, asegurándote de que la primera columna sea Hugo_Symbol y las demás sean muestras
# Reestructurar los datos para ggplot2
tpm_melted <- melt(rnaseq_tpm_data, variable.name = "Sample", value.name = "Expression")
log_melted <- melt(log_data, variable.name = "Sample", value.name = "Expression")  # Excluir Hugo_Symbol al derretir
# Histogramas
p1 <- ggplot(tpm_melted, aes(x = Expression)) +
geom_histogram(bins = 50, fill = "skyblue", color = "black") +
ggtitle("Distribución TPM") +
theme_minimal()
p2 <- ggplot(log_melted, aes(x = Expression)) +
geom_histogram(bins = 50, fill = "salmon", color = "black") +
ggtitle("Distribución log2(TPM + 1)") +
theme_minimal()
# Mostrar los histogramas lado a lado
grid.arrange(p1, p2, ncol = 2)
# Boxplots para comparar la dispersión entre muestras
p3 <- ggplot(tpm_melted, aes(x = Sample, y = Expression)) +
geom_boxplot(fill = "skyblue") +
ggtitle("Boxplot TPM") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
p4 <- ggplot(log_melted, aes(x = Sample, y = Expression)) +
geom_boxplot(fill = "salmon") +
ggtitle("Boxplot log2(TPM + 1)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Mostrar los boxplots lado a lado
grid.arrange(p3, p4, ncol = 2)
# Boxplots para comparar la dispersión entre muestras
p3 <- ggplot(tpm_melted, aes(x = Sample, y = Expression)) +
geom_boxplot(fill = "skyblue") +
ggtitle("Boxplot TPM") +
theme_minimal())
# Boxplots para comparar la dispersión entre muestras
p3 <- ggplot(tpm_melted, aes(x = Sample, y = Expression)) +
geom_boxplot(fill = "skyblue") +
ggtitle("Boxplot TPM") +
theme_minimal()
p4 <- ggplot(log_melted, aes(x = Sample, y = Expression)) +
geom_boxplot(fill = "salmon") +
ggtitle("Boxplot log2(TPM + 1)") +
theme_minimal()
# Mostrar los boxplots lado a lado
grid.arrange(p3, p4, ncol = 2)
