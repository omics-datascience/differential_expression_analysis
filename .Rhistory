# Función para verificar e instalar paquetes
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
verificar_e_instalar <- function(paquete) {
if (!require(paquete, quietly = TRUE)) {
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(version = "3.20") # Especifica la versión de Bioconductor (opcional)
}
BiocManager::install(paquete)
} else {
print(paste(paquete, "ya está instalado."))
}
}
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar limma
verificar_e_instalar("limma")
# Función para verificar e instalar paquetes
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20") # Especifica la versión de Bioconductor (opcional)
# Función para verificar e instalar paquetes
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20") # Especifica la versión de Bioconductor
BiocManager::install(version = "3.20") # Especifica la versión de Bioconductor
verificar_e_instalar <- function(paquete) {
if (!require(paquete, quietly = TRUE)) {
BiocManager::install(paquete)
}
}
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar edgeR (solo para graficas de volcan)
verificar_e_instalar("edgeR")
# Cargar las bibliotecas (ya deberían estar instaladas con el paso anterior)
library(limma)
library(edgeR)
# Paso 2: Importar los datos (En esta prueba, formato de datos en TPM)
# Asegur que el dataset tenga los IDs de muestra en la primera columna y los grupos en la segunda.
data_full <- read.table("/home/mauricio/Desktop/prueba_expresion/datasets/luad_tcga/data_clinical_patient.txt", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
View(data_full)
# Paso 2: Importar los datos (En esta prueba, formato de datos en TPM)
# Asegur que el dataset tenga los IDs de muestra en la primera columna y los grupos en la segunda.
clinical_data <- read.table("/home/mauricio/Desktop/prueba_expresion/datasets/luad_tcga/data_clinical_patient.txt", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
clinical_data <- clinical_data[, c("PATIENT_ID", "SEX")]
View(clinical_data)
clinical_data$PATIENT_ID <- toupper(as.character(clinical_data$PATIENT_ID))
View(clinical_data)
View(clinical_data)
clinical_data$SEX <- toupper(as.character(clinical_data$SEX))
View(clinical_data)
unique(clinical_data$SEX)
View(clinical_data)
# Cargo metadatos clinicos y proceso
# Asegur que el dataset tenga los IDs de muestra en la primera columna y los grupos en la segunda.
clinical_data <- read.table("/home/mauricio/Desktop/prueba_expresion/datasets/luad_tcga/data_clinical_patient.txt", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
clinical_data <- clinical_data[, c("PATIENT_ID", "SEX")]
clinical_data$SEX <- toupper(as.character(clinical_data$SEX))
unique(clinical_data$SEX) # chequeo que solo haya dos formas de expresar el sexo biologico
# Número de pacientes (filas) antes de eliminar duplicados
n_before <- nrow(clinical_data)
clinical_data <- df[!duplicated(clinical_data), ]
# Número de pacientes después de eliminar duplicados
n_after <- nrow(clinical_data)
clinical_data <- clinical_data[!duplicated(clinical_data), ]
# Número de pacientes después de eliminar duplicados
n_after <- nrow(clinical_data)
cat("Filas eliminadas por duplicacion:", n_before - n_after, "\n")
library(dplyr)
clinical_data %>%
count(SEX) %>%
mutate(Proporcion = n / sum(n))
clinical_data %>%
count(SEX) %>%
mutate(Proporcion = 100 * n / sum(n))
clinical_data %>%
count(SEX) %>%
mutate(Proporcion = 100 * n / sum(n))
# Función para verificar e instalar paquetes
Sys.getenv("R_LIBS_USER")
Sys.getenv("R_LIBS")
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(version = "3.20") # Especifica la versión de Bioconductor
verificar_e_instalar <- function(paquete) {
if (!require(paquete, quietly = TRUE)) {
BiocManager::install(paquete)
}
}
# Verificar e instalar limma
verificar_e_instalar("limma")
# Verificar e instalar edgeR (solo para graficas de volcan)
verificar_e_instalar("edgeR")
# Cargar las bibliotecas (ya deberían estar instaladas con el paso anterior)
library(limma)
library(edgeR)
library(dplyr)
# Cargo metadatos clinicos y proceso
# Asegur que el dataset tenga los IDs de muestra en la primera columna y los grupos en la segunda.
clinical_data <- read.table("/home/mauricio/Desktop/prueba_expresion/datasets/luad_tcga/data_clinical_patient.txt", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
clinical_data <- clinical_data[, c("PATIENT_ID", "SEX")]
clinical_data$SEX <- toupper(as.character(clinical_data$SEX))
unique(clinical_data$SEX) # chequeo que solo haya dos formas de expresar el sexo biologico
# Número de pacientes (filas) antes de eliminar duplicados
n_before <- nrow(clinical_data)
clinical_data <- clinical_data[!duplicated(clinical_data), ]
# Número de pacientes después de eliminar duplicados
n_after <- nrow(clinical_data)
cat("Dataset de metadatos: Filas eliminadas por duplicacion:", n_before - n_after, "\n")
cat("Dataset de metadatos: Numero de pacientes:", n_after, "\n")
cat("Dataset de metadatos: Resumen", "\n")
clinical_data %>%
count(SEX) %>%
mutate(Proporcion = 100 * n / sum(n))
